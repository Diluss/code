import string

alphabet_string = string.ascii_lowercase
remaining_alphabet = list(alphabet_string)
WORD_LENGTH = 5

print("Welcome to new and improved Wordle - CECS 174 edition!")

def read_dictionary(file_name):
    open_file = open(file_name)
    new_file = open_file.readlines()
    open_file.close()
    new_dictionary_list = []
    for i in new_file:
        edited = i.lower().strip('\n')
        new_dictionary_list.append(edited)
    return new_dictionary_list

def enter_a_word(word_type, num_letters):
    a_word = input(f'Enter the {num_letters}-letter {word_type} word: ').lower()
    return a_word

def is_it_a_word(input_word, dictionary_list):
    if input_word in dictionary_list:
        is_word = True
    else:
        is_word = False
    return is_word

def enter_and_check(word_type, dictionary_list):
    while True:
        in_word = enter_a_word(word_type, WORD_LENGTH)
        if len(in_word) == WORD_LENGTH and is_it_a_word(in_word, dictionary_list):
            return in_word
        elif len(in_word) == WORD_LENGTH and is_it_a_word(in_word, dictionary_list) == False:
            print(f"You entered a {len(in_word)}-letter word that is not in the dictionary. Please try again!")
        elif len(in_word) != WORD_LENGTH and is_it_a_word(in_word, dictionary_list) == False:
            print(f"You entered a {len(in_word)}-letter word that is not in the dictionary. Please try again!")
        elif len(in_word) != WORD_LENGTH and is_it_a_word(in_word, dictionary_list) == True:
            print(f"You entered a {len(in_word)}-letter word that is in the dictionary. Please try again!")

def compare_words(player, secret):
    global remaining_alphabet
    global in_secret_word_correct_spot
    global in_secret_word_somewhere
    global not_in_secret_word

    in_correct_spot = 0
    final = ''

    for i in range(len(player)):
        if player[i] == secret[i]:
            final += player[i]
            in_correct_spot += 1
            if in_secret_word_correct_spot.count(player_word[i]) != 1:
                in_secret_word_correct_spot.append(player[i])
                if player[i] in remaining_alphabet:
                    remaining_alphabet.remove(player[i])
                elif player[i] in in_secret_word_somewhere:
                    continue
        elif player[i] != secret[i] and player[i] in secret:
            final += f'({player[i]})'
            if player[i] in remaining_alphabet:
                in_secret_word_somewhere.append(player[i])
                remaining_alphabet.remove(player[i])
        elif player[i] != secret[i] and player[i] not in secret:
            final += '_'
            if player[i] in remaining_alphabet:
                not_in_secret_word.append(player[i])
                remaining_alphabet.remove(player[i])

    return final, in_correct_spot

valid_number = True

in_secret_word_correct_spot = []
in_secret_word_somewhere = []
not_in_secret_word = []

secret_word = enter_and_check('secret', read_dictionary('project4_dictionary.txt'))

N = int(input("Input allowed number of attempts: "))
if N <= 0:
    valid_number = False

attempts = 1

while valid_number:
    print(f"Enter your attempt #{attempts}")
    player_word = enter_and_check('player', read_dictionary('project4_dictionary.txt'))
    result = compare_words(player_word, secret_word)
    print('letter in the right spot:', result[1])
    print('You guessed letters of the secret_word:', result[0])
    print(f"Previously attempted letters that are in the correct spot of secret_word:\n{in_secret_word_correct_spot}")
    print(f"Previously attempted letters that are in some spot of secret_word:\n{in_secret_word_somewhere}")
    print(f"Previously attempted letters that are not in the secret_word:\n{not_in_secret_word}")
    print(f"Remaining letters of the alphabet that have not been tried:\n{remaining_alphabet}")

    if player_word == secret_word:
        print("Congrats you won using", attempts, "attempt(s)")
        break

    if attempts == N:
        print("You already used #" + str(attempts) + " attempts. Better luck tomorrow!")
        break

    attempts += 1
    
